[core]

# inherit from the columnflow configuration file
inherit: $CF_BASE/law.cfg


[modules]

columnflow.tasks.cms.inference
columnflow.tasks.cms.external
__cf_module_name__.tasks


[logging]

law: INFO
luigi-interface: INFO
gfal2: WARNING
columnflow.columnar_util-perf: INFO


[analysis]

default_analysis: __cf_module_name__.config.analysis___cf_short_name_lc__.analysis___cf_short_name_lc__
default_config: run2_2017_nano_v9
default_dataset: st_tchannel_t_powheg

calibration_modules: columnflow.calibration.cms.{jets,met}, __cf_module_name__.calibration.example
selection_modules: columnflow.selection.{empty}, columnflow.selection.cms.{json_filter, met_filters}, __cf_module_name__.selection.example
production_modules: columnflow.production.{categories,normalization,processes}, columnflow.production.cms.{btag,electron,mc_weight,muon,pdf,pileup,scale,seeds}, __cf_module_name__.production.example
categorization_modules: __cf_module_name__.categorization.example
weight_production_modules: columnflow.weight.{empty,all_weights}, __cf_module_name__.weight.example
ml_modules: columnflow.ml, __cf_module_name__.ml.example
inference_modules: columnflow.inference, __cf_module_name__.inference.example

# namespace of all columnflow tasks
cf_task_namespace: cf

# default sandbox for main tasks with standard packages for columnar processing
default_columnar_sandbox: bash::$CF_BASE/sandboxes/venv_columnar.sh

# whether MergeReducedEvents should keep its inputs from ReduceEvents by default
# (otherwise they are removed after merging)
default_keep_reduced_events: True

# wether or not the ensure_proxy decorator should be skipped, even if used by task's run methods
skip_ensure_proxy: False

# some remote workflow parameter defaults
htcondor_flavor: $CF_HTCONDOR_FLAVOR
htcondor_share_software: False
slurm_flavor: $CF_SLURM_FLAVOR
slurm_partition: $CF_SLURM_PARTITION

# ChunkedIOHandler defaults
chunked_io_chunk_size: 100000
chunked_io_pool_size: 2
chunked_io_debug: False

# csv list of task families that inherit from ChunkedReaderMixin and whose output arrays should be
# checked (raising an exception) for non-finite values before saving them to disk
check_finite_output: cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns

# csv list of task families that inherit from ChunkedReaderMixin and whose input columns should be
# checked (raising an exception) for overlaps between fields when created a merged input array
check_overlapping_inputs: None

# whether to log runtimes of array functions by default
log_array_function_runtime: False


[outputs]

# list of all used file systems
wlcg_file_systems: wlcg_fs, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# list of file systems used by columnflow.tasks.external.GetDatasetLFNs.iter_nano_files to
# look for the correct fs per nano input file (in that order)
lfn_sources: wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# output locations per task family
# the key can consist of multple underscore-separated parts, that can each be patterns or regexes
# these parts are used for the lookup from within tasks and can contain (e.g.) the analysis name,
# the config name, the task family, the dataset name, or the shift name
# (see AnalysisTask.get_config_lookup_keys() - and subclasses - for the exact order)
# values can have the following format:
# for local targets : "local[, LOCAL_FS_NAME or STORE_PATH]"
# for remote targets: "wlcg[, WLCG_FS_NAME]"
# (when WLCG_FS_NAME is empty, the tasks' "default_wlcg_fs" attribute is used)
# example:
; run3_2023__cf.CalibrateEvents__nomin*: local
; cf.CalibrateEvents: wlcg


[versions]

# default versions of specific tasks to pin
# the key can consist of multple underscore-separated parts, that can each be patterns or regexes
# these parts are used for the lookup from within tasks and can contain (e.g.) the analysis name,
# the config name, the task family, the dataset name, or the shift name
# (see AnalysisTask.get_config_lookup_keys() - and subclasses - for the exact order)
# note:
# this lookup is skipped if the lookup based on the config instance's auxiliary data succeeded
# example:
; run3_2023__cf.CalibrateEvents__nomin*: prod1
; cf.CalibrateEvents: prod2


[job]

job_file_dir: $CF_JOB_BASE
job_file_dir_cleanup: False

# storage element (SE) and output directory on that SE for crab's internal output
# (crab might not even move files there, but it is strictly required for crab's job submission)
crab_storage_element: $CF_CRAB_STORAGE_ELEMENT
crab_base_directory: $CF_CRAB_BASE_DIRECTORY

# lcg setup file sourced in remote jobs to access gfal tools
remote_lcg_setup: /cvmfs/grid.cern.ch/centos7-ui-200122/etc/profile.d/setup-c7-ui-python3-example.sh


[local_fs]

base: /


[wlcg_fs]

# set this to your desired location
base: root://eosuser.cern.ch/eos/user/$CF_CERN_USER_FIRSTCHAR/$CF_CERN_USER/$CF_STORE_NAME
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB


[wlcg_fs_infn_redirector]

base: root://xrootd-cms.infn.it/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1


[wlcg_fs_global_redirector]

base: root://cms-xrd-global.cern.ch/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1
