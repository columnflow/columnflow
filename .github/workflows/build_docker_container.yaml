# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_call:
    inputs:
      DOCKER_FILE_NAME: 
        description: "Default Dockerfile used for build command"
        default: "Dockerfile"
        type: string
        required: false
      GIT_SUBMODULE_STRATEGY: 
        description: "strategy to be used for git submodules"
        default: recursive
        type: string
        required: false
      PUSH_IMAGE: 
        description: "push image to target registry"
        default: false
        type: boolean
        required: false
      FORCE_PUSH_IMAGE: 
          description: "push image to target registry, whether it exists or not"
          default: false
          type: boolean
          required: false
      PYVERSION: 
        description: "Python version to be used for build"
        required: false
        type: string
        default: "3.10"
      BUILD_ARGS: 
        description: "build arguments to be passed to the build command"
        required: false
        type: string
        default: ""
      HASH:
        description: "Use this hash instead of generating it from HASHFILES"
        type: string
        default: ""
        required: false
      HASHFILES: 
        description: "List of files to be used for cache hash generation"
        required: false
        type: string
        default: |
          **/requirements*.txt
          **/sandboxes/cf_*.sh
          **/setup.sh
          **/_setup*.sh
          pyproject.toml
      IMAGE_NAME: 
        description: "Name of the image to be built"
        type: string
        required: true
      ADDITIONAL_TAGS:
        description: "Additional tags to be added to the image"
        type: string
        required: false
        default: ""
    # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build:
    name: Build and push Docker image ${{ inputs.IMAGE_NAME }}
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    environment: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
          lfs: true
          # clean: false
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker based on hash alone
        id: meta_slim
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ inputs.IMAGE_NAME }}
          tags: |
            type=raw,value=python${{ inputs.PYVERSION || 3.10 }}-${{ inputs.HASH || hashFiles(inputs.HASHFILES) }}
          labels: |

      - name: "Check if tag exists"
        id: check_tag
        run: |
          # The container image registry
          # careful! This will not work if the docker/metadata-action is not run before!
          export foo=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.DOCKER_METADATA_OUTPUT_TAGS }})
      
          if [[ $foo == "" ]]; then
            echo "tag is missing, need to generate"
            echo "tag_missing=true" >> $GITHUB_OUTPUT
          else
            echo "tag is present, no need to generate (unless FORCE_PUSH_IMAGE is set)"
            echo "tag_missing=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: ${{ (steps.check_tag.outputs.tag_missing == 'true' ) || inputs.FORCE_PUSH_IMAGE }}
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ inputs.IMAGE_NAME }}
          tags: |
            type=raw,value=python${{ inputs.PYVERSION || 3.10 }}-${{ inputs.HASH || hashFiles(inputs.HASHFILES) }}
            type=raw,value=python${{ inputs.PYVERSION || 3.10 }}-latest # might want to add a condition for master branch here
            type=schedule,pattern=nightly # in case we want to build nightly images
          labels: |

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        if: ${{ (steps.check_tag.outputs.tag_missing == 'true' ) || inputs.FORCE_PUSH_IMAGE }}
        # if: inputs.PUSH_IMAGE || inputs.FORCE_PUSH_IMAGE
        uses: docker/build-push-action@v5
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          push: ${{ inputs.PUSH_IMAGE || inputs.FORCE_PUSH_IMAGE }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ inputs.ADDITIONAL_TAGS }}
          labels: |
            ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            ${{ inputs.BUILD_ARGS }}
            pyversion=${{ inputs.PYVERSION || 3.10 }}
            BUILDKIT_INLINE_CACHE=1
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
